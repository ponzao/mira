\documentclass[a4paper, finnish]{article}
\usepackage[T1]{fontenc}
\usepackage{pslatex}
\usepackage[utf8]{inputenc}
\usepackage{babel}

\title{A*-algoritmi}
\author{Vesa Marttila\\
\texttt{vesa.marttila@cs.helsinki.fi}}
\date{\today}

\begin{document}

\begin{titlepage}
\maketitle
\thispagestyle{empty}
\end{titlepage}

\tableofcontents
\newpage

\section{Johdanto}
A*-algoritmia käytetään löytämään lyhin reitti lähtösolmusta loppusolmuun verkossa. Toisin kuin esimerkiksi Dijkstran algoritmin, A* hyödyntää heuristiikkaa, eli käytännössä tekee arvion siitä, että miten pitkä matka on kustakin solmusta maalisolmuun.

Prioriteettijono on tärkein tietorakenne tälle algoritmille. Prioriteettijonon paras alkio valitaan aina seuraavaksi kokeiltavaksi solmuksi.

Jos algoritmi ei ole aikaisemmin tuttu, suosittelen tutustumaan Wikipediassa olevaan artikkeliin http://en.wikipedia.org/wiki/A*\_search\_algorithm. Selitys on varmasti kattavampi ja parempi kuin mitä tähän viitsin raapustaa.

\section{Käyttöohje}
Ohjelman toiminta on taattu laitoksen Linux-koneissa, mutta vaatii kuitenkin Apache Mavenin asentamisen ennalta, käyn tämän luonnollisesti tässä läpi.

\subsection{Apache Maven}
Hae ensiksi Apache Maven paketti.
\begin{verbatim}
cd ~
wget http://mirror.eunet.fi/apache/maven/binaries/apache-maven-2.2.1-bin.tar.gz
\end{verbatim}
Ja pura se seuraavalla komennolla.
\begin{verbatim}
tar xvzf apache-maven-2.2.1-bin.tar.gz
\end{verbatim}
Nyt voit siirtää kyseisen ohjelman haluaamasi paikkaan, asetella polkuja ja niin edelleen, mutta tämä ei ole tarpeen.

\subsection{A*-ohjelman asennus}
Jos et ole purkanut jo pakettia, niin tee se nyt.
\begin{verbatim}
tar xvzf tiraha_vesa_marttila.tar.gz
\end{verbatim}
Tai vaihtoehtoisesti kloonaa git repository.
\begin{verbatim}
git clone git://github.com/ponzao/mira.git
\end{verbatim}
Toimit kummalla tavalla tahansa, niin nyt sinulla pitäisi työkansioosi ilmestynyt uusi kansio nimeltä ''mira''. Ohjelman kääntäminen tapahtuu kirjoittamalla komentoriville seuraavaa.
\begin{verbatim}
cd mira
~/apache-maven-2.2.1/bin/mvn package
\end{verbatim}
Tämä olettan, että asensit Mavenin kotihakemistoosi. Tämän jälkeen sinulla pitäisi olla uusi kansio nimeltä ''target''. Täällä kansiossa on JAR-paketti nimeltä ''mira-1.0-SNAPSHOT.jar''.

\subsection{Suoritus}
JAR-paketti suoritetaan samalla tavalla kuin yleensä eli seuraavasti.
\begin{verbatim}
java -jar target/mira-1.0-SNAPSHOT.jar
\end{verbatim}
Tällöin ohjelma lukee standardisyöttövirrasta merkkejä kunnes vastaan tulee tiedostonloppu, joka useimmissa ympäristöissä taitaa olla ctrl+d. Jos haluaa antaa ohjelmalle parametrina tiedoston, se tapahtuu seuraavasti.
\begin{verbatim}
java -jar target/mira-1.0-SNAPSHOT.jar < tiedoston_nimi.map
\end{verbatim}
Ohjelma lopuksi tulostaa käyttäjälle optimaalisen reitin '*'-merkittyinä, kuinka monta solmua käydään reitillä läpi ja mikä on reitin pituus. Jos ohjelma saa virheellisiä syötteitä, ei löydä reittiä tai muuta vastaavaa, niin käyttäjälle tulostetaan virheilmoitus.

\subsection{Kartan formaatti}
Parametrina annetun kartan jokaisen rivin tulee olla yhtä pitkä ja niiden tulee loppua rivinvaihtoon. Jos näitä ei ole noudatettu, seuraamukset ovat odottamattomat.

\section{Toteutus}

\subsection{Prioriteettijono}
Prioriteettijono on toteutettu käyttäen binäärikekoa. Keko on talletettu kasvavaan taulukkoon. Kasvuvauhti on määritelty aina tuplautuvaksi eli, kun keon taulukko tulee täyteen, luodaan uusi taulukko joka on tuplasti suurempi ja sinne kopioidaan alkuperäisen taulukon tiedot. Taulukkoa ei missään vaiheessa pienennetä.

Binäärikeko tarjoaa lisäyksen ja poiston O(log n), sekä kurkkauksen O(1). Taulukon kopiointi on tietenkin raskaahko operaatio, mutta en halunnut varata järjetöntä määrää muistia joka kerta ihan vain sen vuoksi, että sinne saatetaan tallettaa paljon tietoa.

\subsection{A*-algoritmi}
Algoritmin toteutuksessa ei suuria kummallisuuksia ole. Ehkä ainoana erikoisuutena se, että jos solmulle on laskettu jo arvo ja sen arvo paranee toisella vierailulla, niin sitä ei muuteta suoraan kekoon vaan sinne luodaan kyseisestä solmusta kopio. Tämä sen vuoksi, että jos keossa olevan solmun arvoa muutetaan niin keko menee rikki. Vaihtoehtona tälle kopioinnille olisi tietenkin korjata keossa olevan alkion sijaintia, mutta en löytänyt mitään järkevää tapaa tehdä tätä. Käyttämäni ratkaisu on prosessoinnin osalta parempi, mutta muistin osalta huonompi.

Toinen tekijä jossa varmasti voi löytyä eroja on käytetty heuristiikka. Päädyin käyttämään linnuntietä, koska se ei ainakaan missään nimessä yliarvioi annettua etäisyyttä, mitä esimerkiksi Manhattan tekee.

\section{Testaus}
Lähdekoodien mukana kansiossa src/test/java on 6 integraatiotestimetodia paketissa org.ponzao.it ja 72 yksikkötestimetodia paketissa org.ponzao. Yksikkötestit kattavat 92.7\% ohjelmakoodista. Ainoastaan InputParser ja Main eivät ole katettuja yksikkötestien osalta, koska näissä ei ollut sellaista logiikkaa joka tälle sovellukselle olisi kriittistä. Jos haluat ajaa itse testit ne ajetaan seuraavalla komennolla.

\begin{verbatim}
cd ~/mira  
~/apache-maven-2.2.1/bin/mvn test
\end{verbatim}

\end{document}
