\documentclass[a4paper, finnish]{article}
\usepackage[T1]{fontenc}
\usepackage{pslatex}
\usepackage[utf8]{inputenc}
\usepackage{babel}

\setlength{\textwidth}{120mm}
\setlength{\textheight}{220mm}
\setlength{\parindent}{0mm}
\setlength{\parskip}{3mm plus0.5mm minus0.5mm}

\title{Johdatus tietojenkäsittelytieteeseen}
\author{Vesa Marttila\\
\texttt{vesa.marttila@cs.helsinki.fi}}
\date{\today}

\begin{document}

\begin{titlepage}
\maketitle
\thispagestyle{empty}
\end{titlepage}

\tableofcontents
\newpage

\section{Johdanto}
Tämä essee on kirjoitettu syksyllä 2009 Tomi Pasasen luennoiman Johdatus Tekoälyyn -kurssin pohjalta. Teksti on koottu luentomuistiinpanojeni ja Internetistä löytyvien artikkelien pohjalta, joten tämän vuoksi tekstiä kannattaa lukea hyvin kriittisesti.

\section{Mitä tekoäly on pähkinänkuoressa?}
Wikipediasta: ''Sana tekoäly tarkoittaa sellaisia tietokoneen toimintoja, jotka jäljittelevät ihmiselle tyypillisiä älykkyyttä vaativia toimintoja.'' En ole itse koskaan erityisesti pitänyt tästä määritelmästä, koska ihminen ei ole ainoa olento joka kykenee älykkääseen toimintaan. Käytännössäkin älykkäitä järjestelmiä halutaan rakentaa ratkaisemaan tiettyjen kohdealueiden ongelmia, eikä oikeasti ajattelevia ja mukautuvia olentoja. 

\section{Tietämyksen esittäminen}
Ihmisen tapa käsitellä tietoa ei itselleni ole mitenkään selviö, mutta karvahattu päässä omakohtaiseen kokemukseen perustuen me käsittelemme tietoa erilaisilla tavoilla, joten ei ole mikään ihme, että me olemme pyrkineet esittämään tietoa mitä erinäisin tavoin myös tietokoneelle. 

Luennolla esiteltiin ongelma, jossa on 3x3 shakkilauta neljällä ratsulla varustettuna. Jokaista nappulaa saa siirtää vain kerran ja kaikkia pitää pystyä siirtämään vuoronperään. Ihmiselle, joka tietää shakin säännöt tämä ongelma on triviaali, ja esitystapa on täydellinen, mutta tietokoneelle tilanne on eri. Vaihtoehtoinen, koneystävällisempi tapa on esittää lauta ja nappulat siirtymäkaaviona, joka itselle ei ihan ensisilmäyksellä aukene. Tämän esimerkki osoittin hyvin sen, että sillä on suuri merkitys miten tietämystä esitetään.

\subsection{Tietämysmallin arviointi}
Tietämysmallia voidaan arvioida sen ilmaisuvoiman, toiminnallisuuden, tehokkuuden ja läpinäkyvyyden pohjalta. 

\subsection{Looginen esitystapa}
Yksi ensimmäisistä tavoista pyrkiä esittämään tietämystä tietokoneelle sopivassa muodossa on looginen esitys. Luennolla esiteltiin propositiologiikka ja predikaattilogiikka. 

\subsubsection{Propositiologiikka}
Propositiologiikassa on vahvassa roolissa lauseet ja niiden totuusarvojen laskeminen. Esimerkiksi, jos meillä on lause ''Ulkona sataa ja minulla on nälkä'' tämä voidaan esittää myös muodossa $P \wedge Q$, jossa P on ''ulkona sataa'' ja Q on ''minulla on nälkä''. Tämä lause on tosi jos ja vain jos P on tosi ja Q on tosi.

\subsubsection{Predikaattilogiikka}
Predikaattilogiikka on taas uusien asioiden päättelyä aikaisempien tietojen pohjalta. Esimerkiksi jos tiedetään yleisesti pätevän, että jos x on y:n isä tai äiti, on x tällöin y:n vanhempi. Sama formalisoituna $(\forall x) (\forall y) father(x, y) \vee mother(x, y) \to parent(x, y)$. Jos vielä tiedetään, että Jeff on Virgilin ja Alanin isä, formaalisti $father(Jeff, Virgil) \wedge father(Jeff, Alan)$, josta voidaan päätellä, että Jeff on molempien poikien vanhempi, formaalisti $parent(Jeff, Virgil) \wedge parent(Jeff, Alan)$.

\subsection{Verkkoesitys}
Verkkoesitys muistuttaa pitkälti olio-ohjelmoinnista tuttua perinnöllisyyttä. Esimerkkinä luennolla annettiin verkko jossa näytetään mistä ja millä ominaisuuksilla rottweiler-rotu voidan periyttää. Rottweiler esimerkiksi perii koiralta haukkumisen, neljä jalkaa, mutta rottweilerilla ei ole häntää. Kyseisestä rodusta voidaan sitten luoda instansseja esimerkiksi Musti tai Moppe. Verkolla voi tietysti esittää muitakin olio-ohjelmoinnista tuttuja käsitteitä kuten omistamista, rajapintoja ym.

\subsection{Tietämyksen hankinta}
Tietämyksen hankkiminen on yksi ongelma, josta tekoälyn kehittäminen kärsii. Tähän ongelmaan on yritys nimeltä Cycorp pyrkinyt löytämään ratkaisua. Yrityksen kotisivuilla voi kuka tahansa pelata peliä, joka kerää tietoa maailmasta. Valitettavasti tämän yrityksen motiivit taitavat olla täysin kaupalliset, joten muut eivät ihan suoraan pääse nauttimaan heidän kehitystyöstä.

\section{Päättely}

\subsection{Mitä päättely on?}
Päättely on ajattelua, joka tavallisesti etenee oletuksista johtopäätökseen. Luennolla päättely jaettiin deduktiiviseen, abduktiiviseen ja induktiiviseen päättelyyn, vaikka Wikipedia tunnisti muutaman muunkin.

\subsubsection{Deduktiivinen päättely}
Deduktiivisessa päättelyssä tosista premisseistä seuraa välttämättä tosi johtopäätös. Wikipediassa on esimerkkinä seuraava:
\begin{enumerate}
\item Kaikki ihmiset ovat kuolevaisia (Premissi 1)
\item Sokrates on ihminen (Premissi 2)
\item Sokrates on kuolevainen (Johtopäätös)
\end{enumerate}

\subsubsection{Abduktiivinen päättely}
Abduktiivinen päättely on päättelyä, jossa pyritään löytämään paras saatavilla oleva selitys. Esimerkki:
\begin{itemize}
\item Jos olet pitkään ulkona auringossa, niin rusketut.
\item Kesällä paistaa usein aurinko (nykyään valitettavan harvoin, kirj. huom.)
\item Niina on usein rannalla.
\item Näin ruskettuneen Niinan rannalla (kesäkuussa).
\item Johtopäätös: Ulkona paistaa aurinko.
\end{itemize}
Tässä päättelyssä ensimmäinen on yleisesti hyväksytty fakta ja muut ovat empiiristä todistusaineistoa. Päättely on rationaalinen ja todennäköinen, vaikka on mahdollista, että Niina on ollut solariumissa juuri ennen rannalle tuloa, mutta tämä on meille tuntematon tekijä.

\subsubsection{Induktiivinen päättely}
Induktiivissa päättelyssä yksittäisistä havainnoista tehdään yleistys tai teoria. Esimerkiksi jos olen luennolla, jossa on pelkkiä miehiä teen johtopäätöksen, että kaikki opiskelijat ovat miehiä. Tämä yleistyshän hajoaa käsiin, kun kävelee salista ulos, mutta tämä on kuitenkin induktiivisen päättelyn perusajatus.


\subsubsection{Sumea päättely}
Sumea päättely oli mielenkiintoista, koska se oli tähänastisista menetelmistä ehkä lähimpänä ihmisen suorittamaa päättelyä. Aikaisempiin menetelmiin verrattuna sumeassa päättelyssä ymmärretään, että maailma ei ole täysin mustavalkoinen, vaan vastaus löytyy usein harmaan eri sävyistä. Käytännössä tämä tarkoittaa sitä, että totuusarvo vaihtelee välillä $[0...1]$.

\section{Etsintä}

\subsection{Ongelmatyyppejä}
Etsintää käytetään, kun halutaan ratkaista millä siirtymillä päästään haluttuun ratkaisuun. Halutun ratkaisun ei tarvitse aina olla optimaalisin, koska joskus tarpeeksi hyvä riittää. Ongelmatyyppiin vaikuttaa myös se, että onko mukana vastustajaa vai ei. Vastustajan mukana ollessa ongelma on epädeterministinen, koska hänen toimet vaikuttavat peliin tavalla jota ei välttämättä pystytä täysin ennakoimaan.

\subsection{Etsintätilan rakenne}

\subsubsection{Generoi ja testaa}
Generoiminen ja generoitujen tuloksien testaaminen, kunnes löytyy oikea, toimii tietyissä tilanteissa hyvin. Se on ensinnäkin usein helppo toteuttaa ja pienissä ongelmissa se ei välttämättä vie edes kauheasti aikaa. Siirryttäessä vaikeampiin ongelmiin, kuten esimerkiksi shakkiin ja siinä useiden siirtojen eteenpäin ennakointia, ei voida enää generoida kaikkia mahdollisuuksia, koska tietokoneiden vääntö ei yksinkertaisesti riitä.

\subsubsection{Puu}
Puu on yksi yleisimmistä ja intuitiivisimmasta tavoista mallintaa ongelmaa. Moneen ongelmaan löytyyksin yksinkertainen ja riittävän tehokas ratkaisu soveltamalla puuta ja siihen vielä karsintaa. Tämä käytännössä tarkoittaa sitä, että juuren alapuolella on kaikki aloitusvaihtoehdot, joista valitaan ensimmäinen. Ensimmäisen alapuolella on kaikki seuraavat vaihtoehdot, joista valitaan myös ensimmäinen. Jos seuraamalla aina tätä ensimmäistä vaihtoehtoa päädytään oikeaan tulokseen niin hyvä niin. Usein kuitenkaan näin ei käy, vaan toteamme ratkaisun jossain vaiheessa vääräksi. Tällöin emme jatka enää etenemistä, vaan palaamme puussa ylöspäin siihen solmuun, jolla on vielä tutkimattomia lapsia, ja siirrytään johonkin näistä. Näin jatketaan kunnes kaikki puun solmujen tarjoamat ratkaisut on todettu vääriksi tai löydetti toimiva ratkaisu.

Puuhun voi myös tarvittaessa soveltaa haarautumiskerrointa ja syvyysrajoitteita. Eli ei lähdetä heti tutkimaan kaikkia mahdollisia vaihtoehtoja.

\subsubsection{Verkko}
Ongelmasta voidaa myös rakentaa verkko, josta etsitään sopivin reitti haluttuun lopputulokseen. Verkossa tapahtuvaan reitinhakuun kannattaa valita parhaiten sopiva algoritmi.

%\subsection{Heuristinen etsintä}
Heuristisessa etsinnässä ei haeta parasta ratkaisua, riittävän hyvä riittää. Heuristiset algoritmit ovat käytännössä ainoa järkevä tapa ratkaista monia vaikeita ongelmia, kuten esimerkiksi kauppamatkustajan ongelma.

%\section{Koneoppiminen}
%TODO

%\section{Pelien pelaaminen}
Peleissä tekoäly arvioi tietyt siirrot ja tilanteet tietyin pistein. Tietystä siirrosta esimerkiksi vastustaja saa muutaman plussapisteen. Vastustajan plussapisteet ovat usein hänelle tietenkin miinusta. Näiden pohjalta tekoäly pyrkii tekemään ratkaisunsa. Se miten tilanteet pisteytetään ei aina ole mitenkään selvää, koska esimerkiksi shakissa ratsun ja lähetin arvo vaihtelee pelin edetessä.

\section{Luonnollisen kielen ymmärtäminen}
Luonnollisen kielen ymmärtäminen voidaan jakaa viiteen eri tasoon, jotka ovat seuraavat:
\begin{enumerate}
\item Lauseopillinen taso (syntaksi): jotkin sanat voivat muodostaa järkevän kokonaisuuden, toiset eivät (''I hit the man with the hammer''). 
\item Sanastollinen taso (leksikaalinen): sanoilla voi olla useita merkityksiä (''I went to the bank'').
\item Viittauksien epäselvyys (referentiaalinen): lauseiden väliset viittaukset (''Fred hit Joe because he liked Harry'').
\item Semanttinen: lauseella voi olla useita merkityksiä (''He saw her duck'').
\item Pragmaattinen: miten lause tulkitaan kyseisessä kontekstissa (''Dinosaurs have been extinct for a long time'').
\end{enumerate}

\subsection{Lauseopillinen jäsentäminen}
Lauseopillisella jäsentämisellä tarkoitetaan yksittäisten sanojen yhdistämistä suuremmiksi kokonaisuuksiksi. Esimerkiksi lause ''who belongs to a union'' koostuu viidestä sanasta, joiden tyypit ovat järjestyksessä relatiivipronomini, verbi, prepositio, epämääräinen artikkeli ja substantiivi. Artikkeli ja substantiivi muodostavat substantiviilauseen. Prepositio ja substantiivilause muodostavat prepositiolauseen. Verbi ja prepositiolause muodostavat yhdessä verbilauseen ja lopulta relatiivipronomini ja verbilause muodostavat koko tutkittavan lauseen.

Tälläisten sääntöjen luominen mahdollistaa periaatteessa sen, että mikä tahansa lauseen jäsen voidaan vaihtaa toiseen vastaavan. Puoltavana esimerkkinä voin antaa esimerkiksi lauseen ''who belongs to the team'', jossa viimeinen substantiivilause on korvattu toisella. Vastaesimerkkinä taas löytyy lause ''who belongs to the mirror'', jossa ehkä jossain tilanteessa voisi olla järkeä semanttisessa mielessä, mutta ei nyt ainakaan heti tule itselle mieleen (jos keksit kontekstin jossa tämä toimii hyvin niin lähetä sähköpostia).

Lauseopillinen jäsentäminen ja sen myötä sääntöjen luominen on myös hyvin kieliriippuvaista, koska kielet eroavat rakenteiltaan toisistaan hyvinkin paljon. On kieliä, joissa on prepositioita, toisissa taas postpositioita, lauserakenteetkin ovat tietyissä kielissä hyvin tiukkoja, toisissa kuten esimerkiksi suomessa hyvin löysiä, vaikkakin jälkimmäisen kieliryhmän ''ritaripuhetyyli'' kerää varmasti huvittuneita katseita.

Selkeästi pelkällä kieliopilla ei pystytä ymmärtämään luonnollista kieltä. Yksi tapa yrittää korjata tämä on lisätä lauserakenteisiin semanttista merkitystä luomalla relaatioita asioiden välille. Esimerkiksi tietyt lauseen osat vaativat kuulumista tietyntyyppiseen relaation aikaisempien ehtojen nojalla.

Luonnollisen kielen ymmärtäminen on mielenkiintoinen ongelma, mutta myös hyvin vaikea. Maailman suosituin hakukone ei pyri ''ymmärtämään'' tekstin sisältöä, toiset vähemmän suositut yrittävät.

\section{Konenäkö}

\subsection{Vaiheet}
Konenäön vaiheet voidaan jakaa neljään eri osa-alueeseen: digitalisointi ja signaalin prosessointi, reunojen ja alueiden löytäminen, objektien tunnistus sekä viimeisenä kuvan ymmärtäminen.

\subsubsection{Digitalisointi}
Digitalisointi käytännössä tehdään jakamalla kuva ruudukkoon, ja antamalla jokaiselle ruudulle jokin arvo. Se miten suuri ruudukko ja millä skaalalla arvoja annetaan tietenkin vaikuttaa siihen miten paljon asioita jatkossa pystytään erottamaan kuvasta.

\subsubsection{Alueiden muodostaminen}
Alueiden muodostaminen tapahtuu yhdistämällä ensin samanarvoiset alueet yhdeksi isommaksi. Tämän jälkeen yhdistetään vielä pienemmät alueet isompiin siten, että katsotaan mitä vieressä olevaa aluetta lähimpänä lukuarvoltaan alue on.

\section{Robotiikka}
Robotiikassa on tärkeää pystyä tarjoamaan robotille tietoa ympäröivästä maailmasta. Tämä tieto on joko annettua tai robotin itsensä havainnoimaa anturien avulla, usein kuitenkin molempia.

\section{Filosofiset ja sosiologiset kysymykset}
En pidä hienoimpiakaan automatisoituja laitteita minään muuna kuin itsessään typerinä laitteina, jotka ihminen on luonut täyttämään tietyn tehtävän. Ihminen ja mikä tahansa muu eläin syntyessään omaa mahdollisuuden tehdä ihan mitä itse haluaa, kone on aina luotu tiettyä tarkoitusta varten. Tässä ei kuitenkaan ole mielestäni mitään pahaa, maailmassa on jo yksi olento joka tekee kaikkea älytöntä, ei varmaan tarvita toista?

\end{document}
